import click
from .keepfiles import KeepFiles
from .gitinfo import GitInfo


@click.command()
@click.option("--file", multiple=True, help="Files to keep")
@click.option("--directory", multiple=True, help="Directories to keep")
@click.option("--dir-structure", type=click.Choice(['FLAT', 'ORIGINAL'], case_sensitive=False), required=True, help="Select the new directory structure")
@click.option("--final_directory", help="Move all kept files under this directory")
@click.option("--git-remote-url", help="URL of the new git repo", required=True)
@click.option("--git-branch", help="Git branch name", required=True)
@click.option("--save-shell-script", is_flag=True, default=True, help="Save the shell script to a file (recommended to document in PR)")
@click.option("--shell-script-name", default="gitmove.sh", help="Name of the shell script")
@click.option("--try-keep", is_flag=True, default=False, help="Test out the Keep stage (run outside of git)")
@click.option("--execute", is_flag=True, default=False, help="Run the shell script")
def main(file, directory, dir_structure, final_directory, git_remote_url, git_branch, save_shell_script, shell_script_name, try_keep, execute):
    """
    This utility will help you move files from one git repo to another, while preserving history.
    Under the hood, this utility uses git-filter-branch, but the API is much more user friendly.

    \b
    Select what files/directories you want to keep
        Use --file and --dir to select what files you want moved
    Select the new directory for the files
        Use --dir-structure to specify if you want to keep the original directory str
            FLAT: flatten all the file into one directory
            ORIGINAL: preserve the original directory structure
        Use --final_directory to specify the new subdirectories for all kept files
    Let 'er rip.
        Use --git-remote, --git-branch, --save-shell-script, --save-shell-script-name
        --try-keep, and --execute to configuration execution
    """

    print("#! /bin/env bash")
    print("")
    print("####################################################################")
    print("# This script was generated by git-repo-move! Star it on Github ;) #")
    print("####################################################################")
    print("")
    print("# Create Branch (delete if exists)")
    git_info = GitInfo(remote_url=git_remote_url, branch=git_branch)
    print(git_info.create_new_branch_cmd())
    print("")
    keepfiles = KeepFiles(keep_files=file, keep_directories=directory, is_dir_structure_flat=dir_structure == "FLAT", final_directory=final_directory)
    keepfiles_list = ", ".join(keepfiles.get_files_and_directories())
    workingdir=keepfiles.working_dir
    print("# The tree-filter flag will run a command on every commit")
    print("# Let's run a command to move all the files we care about to a safe location")
    print(f"# Move {keepfiles_list} to {keepfiles.working_dir}")
    keepfiles_cmds = "; \\ \n    ".join(keepfiles.generate_commands())
    print(f"git filter-branch --force --prune-empty --tree-filter \"{keepfiles_cmds}\"")
    print("")
    print("# The subdirectory-filter flag saves everything in the given folder, and ignores everything else")
    print(f"git filter-branch --force --prune-empty --subdirectory-filter {keepfiles.working_dir}")
    print("")
    print("# Add a new remote and push the branch")
    print(git_info.add_new_remote_cmd())
    print(git_info.push_branch_to_remote_cmd())
    print("")
    print("# Let's remove the remote so we don't forget")
    print(git_info.remove_new_remote_cmd())